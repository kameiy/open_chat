rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	match /users/{userID}{
    	allow get: if isUserAuthenticated(userID)
      allow write: if isUserAuthenticated(userID)
      match /rooms/{roomID}{
        allow create: if isAuthenticated()
                        && isUserAuthenticated(userID)
        allow get,list: if isAuthenticated()
                        && isUserAuthenticated(userID)
      }
    }
    match /rooms/{roomID}{
    	allow get: if isAuthenticated()
      allow write: if isAuthenticated()
                    && request.resource.data.name is string
                    && request.resource.data.name != ""
                    && request.resource.data.owner is string
                    && request.resource.data.owner == request.auth.uid
      match /messages/{messageID}{
      	allow list: if isAuthenticated();
      	allow create: if isAuthenticated() && validateMessage()
      }
      match /users/{userID}{
      	allow write: if isAuthenticated() 
                      && isUserAuthenticated(userID) 
                      && request.resource.data.name is string
                      && request.resource.data.name != ""
        allow get,list: if isAuthenticated() && exists((/databases/$(database)/documents/rooms/$(roomID)/users/$(request.auth.uid)))
      }
    }
    
    function isAuthenticated() {
      return request.auth != null
    }
    function isUserAuthenticated(userID) {
      return request.auth.uid == userID
    }

    function validateMessage(){
      return
        request.resource.data.name is string &&
        request.resource.data.author is string &&
        request.resource.data.text is string &&
        request.resource.data.created is timestamp &&
        request.resource.data.author == request.auth.uid && 
        request.resource.data.name != "" &&
        request.resource.data.text != ""
    }
  }
}